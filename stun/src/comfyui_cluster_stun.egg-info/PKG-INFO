Metadata-Version: 2.4
Name: comfyui-cluster-stun
Version: 0.1.0
Summary: STUN server for ComfyUI Cluster instance registration
Author-email: nomcycle <sean@taostensor.llc>
License: MIT
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: fastapi
Requires-Dist: uvicorn
Requires-Dist: pydantic
Provides-Extra: dev
Requires-Dist: dotenv; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: aiohttp; extra == "dev"
Requires-Dist: httpx; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: pytest-asyncio; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: ruff; extra == "dev"

# ComfyUI Cluster STUN Server

A STUN (Signaling and Tracking Usage for Networks) server for ComfyUI Cluster instances. This server provides a central registration point for ComfyUI Cluster instances to discover and communicate with each other.

## Features

- Secure instance registration with API key authentication
- Cluster-based organization of instances
- Instance heartbeat tracking
- Automatic cleanup of stale instances
- Extensible architecture with dependency injection
- Fast and efficient with fail-fast design principles

## Architecture

The STUN server follows SOLID principles and uses a clean, modular architecture:

- **Single Responsibility**: Each module has a single responsibility
- **Open/Closed**: The system is open for extension but closed for modification
- **Liskov Substitution**: Interface implementations are substitutable
- **Interface Segregation**: Clients are not forced to depend on interfaces they don't use
- **Dependency Inversion**: High-level modules are not dependent on low-level modules

## Installation

### Using uv (recommended)

[uv](https://github.com/astral-sh/uv) provides fast dependency resolution and installation for Python packages.

```bash
# Install uv if you don't have it
curl -sSf https://astral.sh/uv/install.sh | bash

# Install the STUN server
cd /path/to/ComfyUI_Cluster/stun
uv install --no-dev
```

### Using pip

```bash
cd /path/to/ComfyUI_Cluster/stun
pip install -e .
```

## Configuration

The STUN server is configured using environment variables:

- `COMFY_CLUSTER_STUN_HOST`: Host to listen on (default: 0.0.0.0)
- `COMFY_CLUSTER_STUN_PORT`: Port to listen on (default: 8089)
- `COMFY_CLUSTER_STUN_LOG_LEVEL`: Logging level (default: INFO)
- `COMFY_CLUSTER_AUTH_KEYS`: Comma-separated list of cluster:key pairs (required)

Example:

```bash
COMFY_CLUSTER_AUTH_KEYS="cluster1:secretkey1,cluster2:secretkey2" python -m src.server
```

## Running the Server

```bash
# Run directly
python -m src.server

# Or use the installed script
stun-server

# With command line options
stun-server --host 127.0.0.1 --port 8000 --log-level DEBUG
```

## API Endpoints

- `POST /register-instance`: Register an instance
- `GET /instances/{cluster_id}`: Get all instances for a cluster
- `POST /heartbeat/{cluster_id}/{instance_id}`: Update heartbeat for an instance
- `GET /clusters`: Get all registered clusters
- `DELETE /instance/{cluster_id}/{instance_id}`: Manually remove an instance
- `GET /health`: Health check endpoint (no authentication required)

## Authentication

The STUN server uses a secure request signing mechanism for authentication:

1. Each cluster has a shared secret key configured on the server
2. When making requests, clients must include the following headers:
   - `X-Cluster-ID`: The ID of the cluster (for requests without cluster_id in path)
   - `X-Timestamp`: Current Unix timestamp (seconds since epoch)
   - `X-Signature`: HMAC-SHA256 signature of `{request_path}:{timestamp}:{request_body}`

Example client-side authentication code:

```python
import hmac
import hashlib
import time
import requests
import json

def create_signature(request_path, request_body, timestamp, api_key):
    string_to_sign = f"{request_path}:{timestamp}:{request_body}"
    signature = hmac.new(
        api_key.encode('utf-8'),
        string_to_sign.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()
    return signature

def make_authenticated_request(url, cluster_id, api_key, method="GET", data=None):
    # Create timestamp
    timestamp = str(int(time.time()))
    
    # Prepare request path and body
    url_parts = url.split("/", 3)
    request_path = "/" + url_parts[3] if len(url_parts) > 3 else "/"
    request_body = ""
    
    if data and method in ["POST", "PUT", "PATCH"]:
        request_body = json.dumps(data)
    
    # Create signature
    signature = create_signature(request_path, request_body, timestamp, api_key)
    
    # Prepare headers
    headers = {
        "X-Cluster-ID": cluster_id,
        "X-Timestamp": timestamp,
        "X-Signature": signature,
        "Content-Type": "application/json"
    }
    
    # Make request
    if method == "GET":
        return requests.get(url, headers=headers)
    elif method == "POST":
        return requests.post(url, headers=headers, json=data)
    elif method == "DELETE":
        return requests.delete(url, headers=headers)
    else:
        raise ValueError(f"Unsupported method: {method}")
```

Security features:
- Signatures expire after 5 minutes to prevent replay attacks
- Server uses constant-time comparison to prevent timing attacks
- API keys are never transmitted over the network

## Development

### Setting up the development environment

```bash
# Install development dependencies
uv install --dev

# Run tests
pytest

# Run linters
ruff check .
mypy .
```

## License

MIT
