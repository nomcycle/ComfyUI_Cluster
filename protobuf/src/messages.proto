syntax = "proto3";

enum ClusterRole {
    NO_ROLE = 0;
    LEADER = 1;
    FOLLOWER = 2;
}

enum ClusterState {
    NO_STATE = 0;
    INITIALIZE = 1; 
    POPULATING = 2;
    IDLE = 4;
    EXECUTING = 8;
    ERROR = 16;
}

enum ClusterMessageType {
    NO_MESSAGE_TYPE = 0;
    ACK = 1;
    SIGNAL_HOT_RELOAD = 2;
    ANNOUNCE = 4;
    SIGNAL_IDLE = 8;
    REQUEST_STATE = 16;
    RESOLVED_STATE = 32;
    DISTRIBUTE_PROMPT = 64;
    DISTRIBUTE_BUFFER_BEGIN = 128;
    DISTRIBUTE_BUFFER_NEXT = 256;
    DISTRIBUTE_BUFFER_RESEND = 512;
    DISTRIBUTE_BUFFER_ACK = 1024;
}

message ClusterMessageHeader {
    ClusterMessageType type = 1;
    int32 message_id = 2;
    int32 sender_instance_id = 3;
    bool require_ack = 5;
}

message ClusterAck {
    ClusterMessageHeader header = 1;
    int32 ack_message_id = 2;
}

message ClusterSignalHotReload {
    ClusterMessageHeader header = 1;
    string timestamp = 2;
}

message ClusterRequestState {
    ClusterMessageHeader header = 1;
    ClusterState state = 2;
}

message ClusterResolvedState {
    ClusterMessageHeader header = 1;
    int32 request_message_id = 2;
    ClusterState state = 3;
}

message ClusterFenceRequest {
    ClusterMessageHeader header = 1;
    int32 node_id = 2;
}

message ClusterFenceResponse {
    ClusterMessageHeader header = 1;
    int32 node_id = 2;
}

message ClusterAnnounceInstance {
    ClusterMessageHeader header = 1;
    ClusterRole role = 2; 
    int32 direct_listening_port = 3;
    bool all_accounted_for = 4;
}

message ClusterDistributePrompt {
    ClusterMessageHeader header = 1;
    string prompt = 2; 
}

enum ClusterBufferType {
    NO_BUFFER_TYPE = 0;
    TENSOR = 1;
}

message ClusterDistributeBufferBegin {
    ClusterMessageHeader header = 1;
    int32 instance_index = 2;
    ClusterBufferType buffer_type = 3;
    int32 buffer_byte_size = 4;
    int32 chunk_count = 5;
}

message ClusterDistributeBufferAck {
    ClusterMessageHeader header = 1;
    int32 instance_index = 2;
}

message ClusterDistributeBufferNext {
    ClusterMessageHeader header = 1;
}

message ClusterDistributeBufferResend {
    ClusterMessageHeader header = 1;
    int32 instance_index = 2;
    bytes missing_chunk_ids = 3;
}

message ClusterSignalIdle {
    ClusterMessageHeader header = 1;
}