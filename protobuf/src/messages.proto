syntax = "proto3";

enum ClusterRole {
    LEADER = 0;
    FOLLOWER = 1;
}

enum ClusterState {
    INITIALIZE = 0;
    POPULATING = 1;
    IDLE = 2;
    EXECUTING = 4;
    ERROR = 8;
}

enum ClusterMessageType {
    ACK = 0;
    SIGNAL_HOT_RELOAD = 1;
    ANNOUNCE = 2;
    SIGNAL_IDLE = 4;
    DISTRIBUTE_PROMPT = 8;
    DISTRIBUTE_BUFFER_BEGIN = 16;
    DISTRIBUTE_BUFFER_ACK = 32;
}

message ClusterMessageHeader {
    ClusterMessageType type = 1;
    int32 message_id = 2;
    string sender_instance_id = 3;
    int32 process_id = 4;
    bool require_ack = 5;
}

message ClusterAck {
    ClusterMessageHeader header = 1;
    int32 ack_message_id = 2;
}

message ClusterSignalHotReload {
    ClusterMessageHeader header = 1;
    string timestamp = 2;
}

message ClusterFenceRequest {
    ClusterMessageHeader header = 1;
    int32 node_id = 2;
}

message ClusterFenceResponse {
    ClusterMessageHeader header = 1;
    int32 node_id = 2;
}

message ClusterAnnounceInstance {
    ClusterMessageHeader header = 1;
    ClusterRole role = 2; 
    bool all_accounted_for = 3;
}

message ClusterDistributePrompt {
    ClusterMessageHeader header = 1;
    string prompt = 2; 
}

enum ClusterBufferType {
    TENSOR = 0;
}

message ClusterDistributeBufferBegin {
    ClusterMessageHeader header = 1;
    int32 instance_index = 2;
    ClusterBufferType buffer_type = 3;
    int32 buffer_byte_size = 4;
    int32 chunk_count = 5;
    repeated uint32 chunk_ids = 6;
}

message ClusterDistributeBufferAck {
    ClusterMessageHeader header = 1;
    int32 instance_index = 2;
}

message ClusterSignalIdle {
    ClusterMessageHeader header = 1;
}